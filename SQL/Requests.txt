#MAIN START CREATE DATABASE#

CREATE TABLE Authorization
(
	ID_authorization     INTEGER NOT NULL AUTO_INCREMENT,
	Login                CHAR(18) NOT NULL,
	Password             CHAR(18) NOT NULL DEFAULT 'user',
	Role                 boolean NOT NULL DEFAULT 0,
	PRIMARY KEY (ID_authorization)
);

CREATE TABLE Clients
(
	ID_client            INTEGER NOT NULL AUTO_INCREMENT,
	ID_authorization     INTEGER NULL unique,
	First_name_client    CHAR(20) NOT NULL,
	Second_name_client   CHAR(20) NOT NULL,
	Third_name_client    CHAR(20) NOT NULL,
	Email_address        CHAR(30) NOT NULL unique,
	Contact_phone_number VARCHAR(18) NOT NULL CHECK (Contact_phone_number REGEXP('\\+7 \\([0-9]{3}\\) [0-9]{3}\\-[0-9]{2}\\-[0-9]{2}')),
	PRIMARY KEY (ID_client),
	FOREIGN KEY (ID_authorization) REFERENCES Authorization (ID_authorization)
);

CREATE TABLE Contracts
(
	ID_contract          INTEGER NOT NULL AUTO_INCREMENT,
	Name_contract        VARCHAR(32) NOT NULL,
	Path_contract        CHAR(255) NULL DEFAULT 'D:\Users\tailerster\OneDrive\Desktop\Files\Study\RBD\Server\serv\.idea\dataSources\2412f5cf-d824-427d-afdf-13c034896403\storage_v2\Main_path',
	Date_create_contract TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
	PRIMARY KEY (ID_contract)
);

CREATE TABLE Manufacturer
(
	ID_manufacturer      INTEGER NOT NULL AUTO_INCREMENT,
	Name_manufacturer    CHAR(18) NOT NULL,
	TIN                  varchar(10) NOT NULL,
	PRIMARY KEY (ID_manufacturer)
);

CREATE TABLE Offices
(
	ID_office            INTEGER NOT NULL AUTO_INCREMENT,
    Name_office          CHAR(30) NOT NULL,
	Number_workers_office INTEGER NOT NULL DEFAULT 0,
	PRIMARY KEY (ID_office)
);

CREATE TABLE Positions
(
	ID_position          INTEGER NOT NULL AUTO_INCREMENT,
	Name_position        CHAR(30) NOT NULL,
	Wages_positions      INTEGER NOT NULL DEFAULT 30000,
	Worker_hours_per_month_position INTEGER NOT NULL DEFAULT 160,
	PRIMARY KEY (ID_position)
);

CREATE TABLE Storages
(
	ID_storage           INTEGER NOT NULL AUTO_INCREMENT,
	Name_storage         CHAR(30) NOT NULL,
	Storage_location     CHAR(128) NOT NULL DEFAULT 'Moscow',
	PRIMARY KEY (ID_storage)
);

CREATE TABLE Workers
(
	ID_worker            INTEGER NOT NULL AUTO_INCREMENT,
	ID_position          INTEGER NOT NULL,
	ID_office            INTEGER NULL,
	ID_authorization     INTEGER NULL,
	First_name_worker    CHAR(20) NOT NULL,
	Second_name_worker   CHAR(20) NOT NULL,
	Third_name_worker    CHAR(20) NOT NULL,
	Email_address        CHAR(30) NOT NULL unique,
	Contact_phone_number VARCHAR(18) NOT NULL CHECK (Contact_phone_number REGEXP('\\+7 \\([0-9]{3}\\) [0-9]{3}\\-[0-9]{2}\\-[0-9]{2}')),
	PRIMARY KEY (ID_worker,ID_position),
	FOREIGN KEY (ID_office) REFERENCES Offices (ID_office),
    FOREIGN KEY (ID_position) REFERENCES Positions (ID_position),
    FOREIGN KEY (ID_authorization) REFERENCES Authorization (ID_authorization)
);

CREATE TABLE Reports
(
	ID_report            INTEGER NOT NULL AUTO_INCREMENT,
	ID_worker            INTEGER NOT NULL,
	ID_position          INTEGER NOT NULL,
	Name_report          VARCHAR(32) NOT NULL,
	Path_report          CHAR(255) NULL DEFAULT 'D:\Users\tailerster\OneDrive\Desktop\Files\Study\RBD\Server\serv\.idea\dataSources\2412f5cf-d824-427d-afdf-13c034896403\storage_v2\Main_path',
	Date_create_report   TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
	PRIMARY KEY (ID_report,ID_worker,ID_position),
	FOREIGN KEY (ID_worker, ID_position) REFERENCES Workers (ID_worker, ID_position)
);

CREATE TABLE Instruments
(
	ID_instrument        INTEGER NOT NULL AUTO_INCREMENT,
	ID_manufacturer      INTEGER NOT NULL,
	ID_storage           INTEGER NOT NULL,
	Name_instrument      VARCHAR(32) NOT NULL,
	Price                INTEGER NOT NULL DEFAULT 1000,
	Access               boolean NOT NULL DEFAULT 1,
    PRIMARY KEY (ID_instrument,ID_storage,ID_manufacturer),
    FOREIGN KEY (ID_storage) REFERENCES Storages (ID_storage),
    FOREIGN KEY (ID_manufacturer) REFERENCES Manufacturer (ID_manufacturer)
);

CREATE TABLE Orders
(
	ID_order             INTEGER NOT NULL AUTO_INCREMENT,
	ID_contract          INTEGER NOT NULL,
	ID_worker            INTEGER NOT NULL,
	ID_position          INTEGER NOT NULL,
	ID_client            INTEGER NULL,
	ID_instrument        INTEGER NULL,
	ID_manufacturer      INTEGER NULL,
	ID_storage           INTEGER NULL,
	Number_order         INTEGER NOT NULL,
	Status_order         CHAR(18) NOT NULL DEFAULT 'Open',
    Date_create_order    TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
	Date_taking_instrument DATE NOT NULL,
	Date_return_instrument DATE NOT NULL,
	PRIMARY KEY (ID_order,ID_contract,ID_worker,ID_position),
	FOREIGN KEY (ID_client) REFERENCES Clients (ID_client),
    FOREIGN KEY (ID_worker, ID_position) REFERENCES Workers (ID_worker, ID_position),
    FOREIGN KEY (ID_contract) REFERENCES Contracts (ID_contract),
    FOREIGN KEY (ID_instrument, ID_storage, ID_manufacturer) REFERENCES Instruments (ID_instrument, ID_storage, ID_manufacturer)
);

#END MAIN CREATE DATABASE#

SHOW TABLES;

#FILLING IN TABLES#

DESCRIBE Authorization;
INSERT INTO authorization (Login, Password, Role) VALUES ('admin', 'admin', 1);
INSERT INTO authorization (Login, Password) VALUES ('user1', 'user1');
INSERT INTO authorization (Login, Password, Role) VALUES ('worker1', 'worker1', 1);
INSERT INTO authorization (Login, Password) VALUES ('user2', 'user2');
SELECT * FROM authorization;


DESCRIBE Clients;
INSERT INTO Clients VALUES (1, 2, 'Pavel', 'Ivanov', 'Sergeevich', 'pashaivanov@mail.ru', '79217462534');
INSERT INTO Clients VALUES (DEFAULT, 4, 'Adela', 'Gainutdinova', 'Rishatovna', 'gainADEL@mail.ru', '79003473352');
INSERT INTO Clients VALUES (DEFAULT, DEFAULT, 'Nikita', 'Mashtakov', 'Sergeevich', 'mash001nik@yandex.ru', '79376428874');
INSERT INTO Clients VALUES (DEFAULT, DEFAULT, 'Veronika', 'Yurchenko', 'Yurievna', 'yuryur2@gmail.com', '79352645635');
SELECT * FROM Clients;


#ALTER TABLE Clients CHANGE TELEPHONE TELEPHONE VARCHAR(18) CHECK (TELEPHONE LIKE '%7%');
#ALTER TABLE Clients ADD COLUMN TELEPHONE VARCHAR(18) CHECK (TELEPHONE LIKE '+7 [0-9][0-9][0-9] [0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9]');
#INSERT INTO Clients VALUES (DEFAULT, DEFAULT, 'Veron2ika', 'Yurche2nko', 'Yurie2vna', 'yuryu2r2@gmail.com', '79352645635','+7 (932) 934-82-73');
#ALTER TABLE Clients DROP COLUMN TELEPHONE;

DESCRIBE Contracts;
INSERT INTO Contracts VALUES (DEFAULT, 'Lease contract', DEFAULT, DEFAULT);
INSERT INTO Contracts VALUES (DEFAULT, 'Repair contract', DEFAULT, DEFAULT);
INSERT INTO Contracts VALUES (DEFAULT, 'Diagnostic contract', DEFAULT, DEFAULT);
SELECT * FROM Contracts;


DESCRIBE Manufacturer;
INSERT INTO Manufacturer VALUES (DEFAULT, 'AKG', '5341043421');
INSERT INTO Manufacturer VALUES (DEFAULT, 'BasiX', '5840389940');
INSERT INTO Manufacturer VALUES (DEFAULT, 'CASIO', '2099142154');
INSERT INTO Manufacturer VALUES (DEFAULT, 'DEKKO', '8380498428');
INSERT INTO Manufacturer VALUES (DEFAULT, 'JAM', '1029423717');
INSERT INTO Manufacturer VALUES (DEFAULT, 'Mapex', '9160444829');
INSERT INTO Manufacturer VALUES (DEFAULT, 'SIGMA', '3229322954');
SELECT * FROM Manufacturer;


DESCRIBE Storages;
INSERT INTO Storages VALUES (DEFAULT, 'Main storage', DEFAULT);
INSERT INTO Storages VALUES (DEFAULT, 'Main storage', 'St. Petersburg');
INSERT INTO Storages VALUES (DEFAULT, 'Local storage', DEFAULT);
SELECT * FROM Storages;


DESCRIBE Instruments;
INSERT INTO Instruments VALUES (DEFAULT, 2, 1, 'Balalaika', 500, DEFAULT);
INSERT INTO Instruments VALUES (DEFAULT, 1, 1, 'Drums', 1500, DEFAULT);
INSERT INTO Instruments VALUES (DEFAULT, 3, 1, 'Guitar', 3000, DEFAULT);
INSERT INTO Instruments VALUES (DEFAULT, 7, 2, 'Flute', 300, DEFAULT);
INSERT INTO Instruments VALUES (DEFAULT, 5, 1, 'Triangle', 300, DEFAULT);
INSERT INTO Instruments VALUES (DEFAULT, 2, 1, 'Violin', DEFAULT, DEFAULT);
INSERT INTO Instruments VALUES (DEFAULT, 1, 3, 'Piano', 5000, DEFAULT);
INSERT INTO Instruments VALUES (DEFAULT, 1, 1, 'Balalaika', DEFAULT, DEFAULT);
INSERT INTO Instruments VALUES (DEFAULT, 7, 2, 'Spoons',200, DEFAULT);
SELECT * FROM Instruments;


DESCRIBE Offices;
INSERT INTO Offices VALUES (DEFAULT, 'Management', 1);
INSERT INTO Offices VALUES (DEFAULT, 'Rental', 2);
INSERT INTO Offices VALUES (DEFAULT, 'Repair', 1);
INSERT INTO Offices VALUES (DEFAULT, 'HR', DEFAULT);
SELECT * FROM Offices;


DESCRIBE Positions;
INSERT INTO Positions VALUES (DEFAULT, 'CEO', 50000, 0);
INSERT INTO Positions VALUES (DEFAULT, 'Distributor', 30000, DEFAULT);
INSERT INTO Positions VALUES (DEFAULT, 'Repairman', 20000, DEFAULT);
SELECT * FROM Positions;


DESCRIBE Workers;
INSERT INTO Workers VALUES (DEFAULT, 1, 1, 1, 'Pasha','Chasov','Sergeevich','pashachasov@mail.ru','79247263391');
INSERT INTO Workers VALUES (DEFAULT, 2, 2, 3, 'Alexander','Svatkov','Mikhailovich','SWATalex@gmail.ru','75364729572');
INSERT INTO Workers VALUES (DEFAULT, 2, 2, DEFAULT, 'Daria','Shrainer','Olegovna','dariaaY@gmail.ru','79033746652');
INSERT INTO Workers VALUES (DEFAULT, 3, 3, DEFAULT, 'Nikita','Molchanov','Mikhailovich','242MOlch@gmail.ru','79210745273');
SELECT * FROM Workers;


DESCRIBE Reports;
INSERT INTO Reports VALUES (DEFAULT, 1, 1, 'Hired workers', DEFAULT, DEFAULT);
INSERT INTO Reports VALUES (DEFAULT, 2, 2, 'Leased  instruments', DEFAULT, DEFAULT);
INSERT INTO Reports VALUES (DEFAULT, 2, 2, 'Returned instruments', DEFAULT, DEFAULT);
SELECT * FROM Reports;


DESCRIBE Orders;
INSERT INTO Orders VALUES (DEFAULT, 1, 2, 2, 1, 1, 2, 1, 1, DEFAULT, DEFAULT, NOW(), NOW() + 7000000);
INSERT INTO Orders VALUES (DEFAULT, 1, 2, 2, 1, 2, 1, 1, 1, DEFAULT, DEFAULT, NOW(), NOW() + 7000000);
INSERT INTO Orders VALUES (DEFAULT, 1, 2, 2, 1, 3, 3, 1, 1, DEFAULT, DEFAULT, NOW(), NOW() + 7000000);
INSERT INTO Orders VALUES (DEFAULT, 1, 2, 2, 1, 5, 5, 1, 1, DEFAULT, DEFAULT, NOW(), NOW() + 7000000);
INSERT INTO Orders VALUES (DEFAULT, 1, 2, 2, 1, 4, 7, 2, 2, DEFAULT, DEFAULT, NOW() + 3000000, NOW() + 10000000);
INSERT INTO Orders VALUES (DEFAULT, 1, 2, 2, 1, 9, 7, 2, 2, DEFAULT, DEFAULT, NOW() + 3000000, NOW() + 10000000);
INSERT INTO Orders VALUES (DEFAULT, 1, 2, 2, 1, 1, 2, 1, 3, DEFAULT, DEFAULT, NOW() + 4000000, NOW() + 11000000);
INSERT INTO Orders VALUES (DEFAULT, 1, 2, 2, 2, 7, 1, 3, 4, DEFAULT, DEFAULT, NOW() + 5000000, NOW() + 12000000);
SELECT * FROM Orders;

#END FILLING IN TABLES#


#FUNCTIONS#

CREATE FUNCTION main.GetFullNameClientById(id int) returns varchar(60) deterministic
BEGIN
    RETURN (SELECT concat(Second_name_client, ' ', First_name_client, ' ', Third_name_client) from clients where ID_client=id);
END;

SELECT GetFullNameClientById(1) AS 'Full name client by id';


CREATE FUNCTION main.GetFullNameWorkerById(id int) returns varchar(60) deterministic
BEGIN
    RETURN (SELECT concat(Second_name_worker, ' ', First_name_worker, ' ', Third_name_worker) from workers where ID_worker=id);
END;

SELECT GetFullNameWorkerById(1) AS 'Full name worker by id';


#TODO SET SIZE = (SELECT COUNT(*) FROM Orders WHERE Number_order = numberOrder); - [counter instrument in order]


CREATE FUNCTION GetIDClientByNumberOrder(numberOrder INT) RETURNS INT DETERMINISTIC
BEGIN
    RETURN (SELECT ID_client FROM Orders WHERE Number_order = numberOrder GROUP BY ID_client);
END;

SELECT GetIDClientByNumberOrder(1);


CREATE FUNCTION GetIDWorkerByNumberOrder(numberOrder INT) RETURNS INT DETERMINISTIC
BEGIN
    RETURN (SELECT ID_worker FROM Orders WHERE Number_order = numberOrder GROUP BY ID_worker);
END;


create function GetIDPositionWorkerByIdWorker(IDWorker int) returns int deterministic
return (select ID_position from workers where ID_worker = IDWorker);


create function GetIDManufacturerByIdInstrument(IDInstruments int) returns int deterministic
return (select ID_manufacturer from instruments where ID_instrument = IDInstruments);


create function GetIDStorageByIdInstrument(IDInstruments int) returns int deterministic
return (select ID_storage from instruments where ID_instrument = IDInstruments);

#PROCEDURE#

CREATE PROCEDURE MAIN.GetAllClients()
BEGIN
    DECLARE ID INT DEFAULT 1;
    CREATE TEMPORARY TABLE IF NOT EXISTS TEMP_TABLE (id int AUTO_INCREMENT, FullName VARCHAR (60), PRIMARY KEY(id));
    WHILE EXISTS(SELECT * FROM Clients WHERE ID_client=ID) DO
        INSERT INTO TEMP_TABLE (FullName) (SELECT GetFullNameClientById(id));
        SET ID = ID + 1;
    END WHILE;
    SELECT * FROM TEMP_TABLE;
    DROP TABLE TEMP_TABLE;
END;

CALL GetAllClients();


CREATE PROCEDURE MAIN.GetAllWorkers()
BEGIN
    DECLARE ID INT DEFAULT 1;
    CREATE TEMPORARY TABLE IF NOT EXISTS TEMP_TABLE (id int AUTO_INCREMENT, FullName VARCHAR (60), PRIMARY KEY(id));
    WHILE EXISTS(SELECT * FROM workers WHERE ID_worker=ID) DO
        INSERT INTO TEMP_TABLE (FullName) (SELECT GetFullNameworkerById(id));
        SET ID = ID + 1;
    END WHILE;
    SELECT * FROM TEMP_TABLE;
    DROP TABLE TEMP_TABLE;
END;

CALL GetAllWorkers();

CREATE PROCEDURE ShowAllOrders()
BEGIN
    SELECT Number_order N, Name_instrument Instrument, Name_manufacturer Brand, Name_contract, Name_storage, Storage_location,
           GetFullNameClientById(GetIDClientByNumberOrder(Number_order)) Client,
           GetFullNameWorkerById(GetIDWorkerByNumberOrder(Number_order)) Worker
            FROM Instruments, Manufacturer, Storages, Orders, Clients, Contracts
            WHERE Instruments.ID_instrument = Orders.ID_instrument AND
                Contracts.ID_contract = Orders.ID_contract AND
                Manufacturer.ID_manufacturer = Orders.ID_manufacturer AND
                Storages.ID_storage = Orders.ID_storage AND
                Clients.ID_client = Orders.ID_client
                ORDER BY Number_order;
END;

CALL ShowAllOrders();

####----
#TODO create procedure adding order by name instrument

CREATE PROCEDURE AddInstrumentToOrder(IDInstrument INT, IDClient INT, IDWorker INT, IDContract INT, numberOrder INT, firstDATE DATE, secondDATE DATE)
BEGIN
    #TODO add check values mot must conflicted
    INSERT INTO Orders VALUES (DEFAULT, IDContract, IDWorker, GetIDPositionWorkerByIdWorker(IDWorker), IDClient, IDInstrument,
                               GetIDManufacturerByIdInstrument(IDInstrument), GetIDStorageByIdInstrument(IDInstrument),
                               numberOrder, DEFAULT, DEFAULT, firstDATE, secondDATE);
END;

CALL AddInstrumentToOrder(4, 2, 2, 1, 5, NOW(), NOW() + 70000);

#TODO it start a error after call ShowAllOrders() - why?
#CALL AddInstrumentToOrder(4, 2, 2, 1, 1, NOW(), NOW() + 70000);
CALL AddInstrumentToOrder(4, 2, 2, 1, 6, NOW(), NOW() + 70000);
####----

SELECT * FROM Orders;
CALL ShowAllOrders();
describe instruments;
describe orders;

#TRIGGERS#

create trigger checker
    after insert
    on clients
    for each row
begin
    drop temporary table if exists accounts;
    create temporary table if not exists main.accounts (id_authorization int, full_name varchar(60), login char(18), password char(18));
    insert into accounts
        select * from (select Authorization.ID_authorization, GetFullNameClientById(new.ID_client) FullName,Login,
        Password from clients, authorization where authorization.ID_authorization = new.ID_authorization) as fff group by login;
end;

create procedure GetLastNewAuthorizationClient()
select * from accounts;

call GetLastNewAuthorizationClient();

create trigger checkNewClient
    after insert
    on clients
    for each row
begin
    drop temporary table if exists newClient;
    create temporary table if not exists main.newClient (id_authorization int, full_name varchar(60), Email_address char(30), Contact_phone_number char(18));
    insert into newClient
        select * from (select Clients.ID_authorization, GetFullNameClientById(new.ID_client) FullName, Email_address,
        Contact_phone_number from clients where Clients.ID_client = new.ID_client) as fff group by Email_address;
end;

select * from newclient;

#TODO not work!
create event DeleteTemporaryTableAccounts on schedule
    every 5 second
    starts current_timestamp
    on completion preserve
    do
call ProcedureForDeleteTemporaryTableAccounts();


create procedure ProcedureForDeleteTemporaryTableAccounts()
begin
    drop temporary table if exists main.accounts;
    create temporary table if not exists accounts (id_authorization int, full_name varchar(60), login char(18), password char(18));
    #insert into accounts values (null,null,null,null);
end;


create event SetAuthorizationForClient on schedule
    every 30 second
    do
    begin
        if main.accounts.ID_authorization IS NULL then

        end if;
    end;

insert into clients values (default,9,9,2,2,'mail@','+7 (424) 242-42-34');
insert into clients values (default,10,9,2,2,',ail@','+7 (424) 242-42-34');
insert into clients values (default,default,9,2,2,'@@@','+7 (424) 242-42-34');
insert into clients values (default,default,9,2,2,2,'+7 (424) 242-42-34');


#CHANGE TABLES#

alter table clients change First_name_client First_name_client VARCHAR(20) NOT NULL;
alter table clients change Second_name_client Second_name_client VARCHAR(20) NOT NULL;
alter table clients change Third_name_client Third_name_client VARCHAR(20) NOT NULL;
alter table clients change ID_authorization	ID_authorization INTEGER NULL unique;
alter table clients change Email_address Email_address char(30) not NULL unique;


alter table workers change First_name_worker First_name_worker VARCHAR(20) NOT NULL;
alter table workers change Second_name_worker Second_name_worker VARCHAR(20) NOT NULL;
alter table workers change Third_name_worker Third_name_worker VARCHAR(20) NOT NULL;
alter table workers change Email_address Email_address char(30) not NULL unique;


